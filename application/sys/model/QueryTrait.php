<?php
/**
 * 模型重构器
 * Created by PhpStorm.
 * User: phpGhost
 * Date: 2018/8/25
 * Time: 16:09
 */

namespace app\sys\model;


trait QueryTrait
{

    /**
     * 常驻条件
     * @var array
     */
    private $permanent_where;


    /**
     * @param string|array $field 条件字段
     * @param null $op
     * @param null $condition
     * @return $this
     */
    public function where($field, $op = null, $condition = null)
    {
        parent::where($field,$op,$condition);
        return $this;
    }


    public function group($group)
    {
        parent::group($group); // TODO: Change the autogenerated stub
        return $this;
    }



    public function order($field, $order = null)
    {
        parent::order($field, $order); // TODO: Change the autogenerated stub
        return $this;
    }


    public function alias($alias)
    {
        parent::alias($alias); // TODO: Change the autogenerated stub
        return $this;
    }


    public function fetchSql($fetch = true)
    {
        parent::fetchSql($fetch); // TODO: Change the autogenerated stub
        return $this;
    }


    /**
     * @param $offset
     * @param null $length
     * @return $this
     */
    public function limit($offset, $length = null)
    {
        parent::limit($offset, $length); // TODO: Change the autogenerated stub
        return $this;
    }


    /**
     * @param $field
     * @param null $op
     * @param null $condition
     * @return mixed
     */
    public function whereOr($field, $op = null, $condition = null)
    {
        parent::whereOr($field, $op, $condition); // TODO: Change the autogenerated stub
        return $this;
    }


    public function column($field, $key = '')
    {
        $this->exec_permanent_where();
        return parent::column($field,$key);
    }


    public function lock($lock = false)
    {
        parent::lock($lock);
        return $this;
    }


    /**
     * @param $field
     * @param bool $except
     * @param string $tableName
     * @param string $prefix
     * @param string $alias
     * @return mixed
     */
    public function field($field, $except = false, $tableName = '', $prefix = '', $alias = '')
    {
        parent::field($field,$except,$tableName,$prefix,$alias);
        return $this;
    }


    /**
     * @param null $data
     * @return $this
     */
    public function find($data = null)
    {
        $this->exec_permanent_where();
        return parent::find($data);
    }


    /**
     * @param null $data
     * @return $this
     */
    public function delete()
    {
        $this->exec_permanent_where();
        return parent::delete();
    }


    /**
     * @param null $listRows
     * @param bool $simple
     * @param array $config
     * @return $this
     */
    public function paginate($listRows = null, $simple = false, $config = [])
    {
        $this->exec_permanent_where();
        return parent::paginate($listRows, $simple, $config); // TODO: Change the autogenerated stub
    }


    /**
     * @param null $data
     * @return $this
     */
    public function select($data = null)
    {
        $this->exec_permanent_where();
        return parent::select($data);
    }


    /**
     * 设置常驻条件
     * @param string|array $field 查询字段
     * @param null $op
     * @param null $condition
     * @return $this
     */
    public function set_permanent_where($field, $op = null, $condition = null,$key = '')
    {
        if( empty($key) ){
            $key = $field;
        }
        $this->permanent_where[$key] = [
            'field' => $field,
            'op' => $op,
            'condition' => $condition
        ];
        return $this;
    }


    /**
     * 执行常驻条件
     * @return $this
     */
    public function exec_permanent_where()
    {
        if( empty($this->permanent_where) ){
            return $this;
        }
        foreach ( $this->permanent_where as $field => $item ) {
            if( is_array($item['field']) ){
                $this->where('');
            }else{
                $this->where($item['field'],$item['op'],$item['condition']);
            }
        }
        return $this;
    }


    /**
     * 清空常驻条件
     * @return $this
     */
    public function clear_permanent_where()
    {
        $this->permanent_where = [];
        return $this;
    }
}